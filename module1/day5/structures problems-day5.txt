problem1


#include <stdio.h>


struct Box {
    double length;
    double width;
    double height;
};


double calculateVolume(struct Box* box) {
    return box->length * box->width * box->height;
}


double calculateSurfaceArea(struct Box* box) {
    return 2 * (box->length * box->width + box->length * box->height + box->width * box->height);
}

int main() {
    
    struct Box myBox;

    
    myBox.length = 5.0;
    myBox.width = 3.0;
    myBox.height = 4.0;

    
    struct Box* boxPtr = &myBox;

    
    double volumeDot = myBox.length * myBox.width * myBox.height;
    double surfaceAreaDot = 2 * (myBox.length * myBox.width + myBox.length * myBox.height + myBox.width * myBox.height);

    
    double volumeArrow = boxPtr->length * boxPtr->width * boxPtr->height;
    double surfaceAreaArrow = 2 * (boxPtr->length * boxPtr->width + boxPtr->length * boxPtr->height + boxPtr->width * boxPtr->height);

    
    printf("Volume (Dot Operator): %.2f\n", volumeDot);
    printf("Total Surface Area (Dot Operator): %.2f\n", surfaceAreaDot);
    printf("Volume (Arrow Operator): %.2f\n", volumeArrow);
    printf("Total Surface Area (Arrow Operator): %.2f\n", surfaceAreaArrow);

    return 0;
}



problem2

#include <stdio.h>


struct Complex {
    double real;
    double imaginary;
};


void readComplex(struct Complex* complex) {
    printf("Enter the real part: ");
    scanf("%lf", &(complex->real));

    printf("Enter the imaginary part: ");
    scanf("%lf", &(complex->imaginary));
}


void writeComplex(struct Complex complex) {
    printf("Complex number: %.2f + %.2fi\n", complex.real, complex.imaginary);
}


struct Complex addComplex(struct Complex complex1, struct Complex complex2) {
    struct Complex result;

    result.real = complex1.real + complex2.real;
    result.imaginary = complex1.imaginary + complex2.imaginary;

    return result;
}

// Function to multiply two complex numbers
struct Complex multiplyComplex(struct Complex complex1, struct Complex complex2) {
    struct Complex result;

    result.real = complex1.real * complex2.real - complex1.imaginary * complex2.imaginary;
    result.imaginary = complex1.real * complex2.imaginary + complex1.imaginary * complex2.real;

    return result;
}

int main() {
    struct Complex complex1, complex2, sum, product;

    printf("Enter the first complex number:\n");
    readComplex(&complex1);

    printf("Enter the second complex number:\n");
    readComplex(&complex2);

    sum = addComplex(complex1, complex2);
    product = multiplyComplex(complex1, complex2);

    printf("\n--- Result ---\n");
    printf("Sum: ");
    writeComplex(sum);

    printf("Product: ");
    writeComplex(product);

    return 0;
}

problem3

#include <stdio.h>


struct Time {
    int hours;
    int minutes;
    int seconds;
};


struct Time calculateTimeDifference(struct Time t1, struct Time t2) {
    struct Time difference;

    
    int totalSeconds1 = t1.hours * 3600 + t1.minutes * 60 + t1.seconds;
    int totalSeconds2 = t2.hours * 3600 + t2.minutes * 60 + t2.seconds;
    int diffSeconds = totalSeconds2 - totalSeconds1;

    
    difference.hours = diffSeconds / 3600;
    difference.minutes = (diffSeconds % 3600) / 60;
    difference.seconds = (diffSeconds % 3600) % 60;

    return difference;
}

int main() {
    struct Time time1, time2, difference;

    printf("Enter the first time period (hours minutes seconds): ");
    scanf("%d %d %d", &time1.hours, &time1.minutes, &time1.seconds);

    printf("Enter the second time period (hours minutes seconds): ");
    scanf("%d %d %d", &time2.hours, &time2.minutes, &time2.seconds);

    difference = calculateTimeDifference(time1, time2);

    printf("\n--- Time Difference ---\n");
    printf("Hours: %d\n", difference.hours);
    printf("Minutes: %d\n", difference.minutes);
    printf("Seconds: %d\n", difference.seconds);

    return 0;
}


problem4

#include <stdio.h>
#include <stdlib.h>


struct Student {
    char name[50];
    int age;
    float marks;
};

int main() {
    int n;

    printf("Enter the number of students: ");
    scanf("%d", &n);

    
    struct Student* students = (struct Student*)malloc(n * sizeof(struct Student));

    if (students == NULL) {
        printf("Memory allocation failed. Exiting...\n");
        return 1;
    }

    
    for (int i = 0; i < n; i++) {
        printf("\nEnter details for Student %d:\n", i + 1);

        printf("Enter name: ");
        scanf("%s", students[i].name);

        printf("Enter age: ");
        scanf("%d", &(students[i].age));

        printf("Enter marks: ");
        scanf("%f", &(students[i].marks));
    }

    
    printf("\n--- Student Data ---\n");
    for (int i = 0; i < n; i++) {
        printf("\nDetails of Student %d:\n", i + 1);

        printf("Name: %s\n", students[i].name);
        printf("Age: %d\n", students[i].age);
        printf("Marks: %.2f\n", students[i].marks);
    }

    
    free(students);

    return 0;
}

problem5

#include <stdio.h>


struct Person {
    char name[50];
    int age;
};


void swapFields(struct Person* p1, struct Person* p2) {
    
    char tempName[50];
    strcpy(tempName, p1->name);
    strcpy(p1->name, p2->name);
    strcpy(p2->name, tempName);

    
    int tempAge = p1->age;
    p1->age = p2->age;
    p2->age = tempAge;
}

int main() {
    struct Person person1, person2;

    
    printf("Enter details for Person 1:\n");
    printf("Enter name: ");
    scanf("%s", person1.name);
    printf("Enter age: ");
    scanf("%d", &(person1.age));

    
    printf("\nEnter details for Person 2:\n");
    printf("Enter name: ");
    scanf("%s", person2.name);
    printf("Enter age: ");
    scanf("%d", &(person2.age));

    printf("\n--- Before Swapping ---\n");
    printf("Details of Person 1:\n");
    printf("Name: %s\n", person1.name);
    printf("Age: %d\n", person1.age);
    printf("\nDetails of Person 2:\n");
    printf("Name: %s\n", person2.name);
    printf("Age: %d\n", person2.age);

    // Swap the fields using the swapFields function
    swapFields(&person1, &person2);

    printf("\n--- After Swapping ---\n");
    printf("Details of Person 1:\n");
    printf("Name: %s\n", person1.name);
    printf("Age: %d\n", person1.age);
    printf("\nDetails of Person 2:\n");
    printf("Name: %s\n", person2.name);
    printf("Age: %d\n", person2.age);

    return 0;
}




